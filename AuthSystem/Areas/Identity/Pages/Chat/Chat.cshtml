@page "{roomId:int}"
@model ChatModel
@{
    ViewData["Title"] = "Private Chat";
}
<link rel="stylesheet" href="~/css/Chat/privateChat.css" />
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<div class="container-fluid chat-wrapper">
    <div class="row">
        <div class="col-md-3 chat-rooms-container">
            <h2>Chat Rooms</h2>
            <ul class="chat-rooms-list">
                @foreach (var room in Model.ChatRooms)
                {
                    <li class="chat-room-item @(room.Id == Model.Room.Id ? "active" : "")">
                        <a asp-page="Chat" asp-route-roomId="@room.Id">@room.Name</a>
                    </li>
                }
            </ul>
        </div>
        <div class="chat-container">
            <h2 class="chat-room-title">
                @Model.Room.Name
                <div class="participant-count">
                    Total Participants: @Model.Participants.Count
                </div>
            </h2>
            <div class="chat-content-container">
                <div class="chat-content">
                    <ul id="messagesList" class="chat-box">
                        @if (Model.Messages.Any())
                        {
                            var lastDate = Model.Messages.First().Timestamp.Date;
                            <li class="date-separator">
                                <span class="date">@lastDate.ToString("MMMM dd, yyyy")</span>
                            </li>
                            @foreach (var message in Model.Messages)
                            {
                                if (message.Timestamp.Date != lastDate)
                                {
                                    lastDate = message.Timestamp.Date;
                                    <li class="date-separator">
                                        <span class="date">@lastDate.ToString("MMMM dd, yyyy")</span>
                                    </li>
                                }
                                <li class="list-group-item @(message.Sender.Email == User.Identity.Name ? "sent" : "received")">
                                    <div class="message-container">
                                        <div class="message-content">
                                            @if (message.Sender.Email != User.Identity.Name)
                                            {
                                                <div class="username">@message.Sender.FirstName @message.Sender.LastName</div>
                                            }
                                            <div class="message-text">@message.Content</div>
                                            @if (!string.IsNullOrEmpty(message.ImageUrl))
                                            {
                                                <div class="message-image"><img src="@message.ImageUrl" class="chat-image" /></div>
                                            }
                                        </div>
                                        <div class="message-info">
                                            <div class="time">@message.Timestamp.ToString("h:mm tt").ToUpper()</div>
                                            @if (message.Sender.Email != User.Identity.Name)
                                            {
                                                <div class="reply-icon"
                                                     data-message-id="@message.Id"
                                                     data-sender-name="@message.Sender.FirstName @message.Sender.LastName"
                                                     data-message-text="@message.Content ">
                                                    <i class="fas fa-reply"></i>
                                                </div>
                                            }
                                            @if (message.Sender.Email == User.Identity.Name)
                                            {
                                                <div class="dropdown">
                                                    <button class="btn btn-link dropdown-toggle" type="button" id="dropdownMenuButton-@message.Id" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <i class="fas fa-chevron-down"></i>
                                                    </button>
                                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton-@message.Id">
                                                        <form method="post" asp-page-handler="DeleteMessage" asp-route-id="@message.Id" class="delete-message-form">
                                                            <button type="submit" class="dropdown-item delete-button">Delete Message</button>
                                                        </form>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    </ul>

                </div>
                <form id="messageForm" method="post" enctype="multipart/form-data">
                    <div class="box">
                        <div id="replyPreview" style="display:none;">
                            <div id="replyingTo" class="replying-to-message"></div>
                            <button id="cancelReply" type="button">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>

                    <div class="input-group">
                        <input type="hidden" id="userEmail" value="@User.Identity.Name" />
                        <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
                        <input type="hidden" name="ReplyContent" id="replyContentInput" value="" /> <!-- Hidden input to store reply content -->
                        <input type="text" class="form-control" name="Content" id="messageInput" placeholder="Type your message..." />
                        <label for="fileInput" class="btn btn-secondary file-label">
                            <i class="fas fa-file-upload"></i>
                        </label>
                        <input type="file" id="fileInput" class="form-control-file" name="Image" accept="image/*" style="display: none;" />
                        <button type="submit" class="btn btn-primary" id="sendButton">Send</button>
                    </div>
                </form>


            </div>
        </div>
        <div class="col-md-3 participants-container" id="participantsContainer">
            <h3>Chat Details</h3>
            <div class="chat-details">
                <h4>Participants</h4>
                <!-- Add User Form -->
                <form id="addUserForm" method="post" asp-page-handler="AddUser">
                    <div class="form-group input-group">
                        <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
                        <input type="text" class="form-control email-input" name="UserIdToAdd" placeholder="Enter user email..." />
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-secondary"><i class="fas fa-plus plus-icon"></i></button>
                        </div>
                        <span asp-validation-for="UserIdToAdd" class="text-danger"></span>
                    </div>
                </form>
                <ul>
                    @foreach (var participant in Model.Participants)
                    {
                        <li>
                            @participant.FirstName
                            @if (participant.Email == Model.Room.Creator.Email)
                            {
                                <span>(Admin)</span>
                            }
                            @if (User.Identity.Name == Model.Room.Creator.Email && participant.Email != Model.Room.Creator.Email)
                            {
                                <!-- Delete icon button -->
                                <form method="post" asp-page-handler="RemoveUser" class="remove-user-form">
                                    <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
                                    <input type="hidden" name="UserIdToRemove" value="@participant.Id" />
                                    <button type="submit" class="remove-btn">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </form>
                            }
                        </li>
                    }
                </ul>


                <!-- Search Container -->
                <div class="search-container mt-3">
                    <h4>Search Coversation</h4>
                    <div class="search-bar">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search messages..." />
                    </div>
                </div>
            </div>
        </div>
        <div class="toggle-button-container">
            <span id="toggleParticipants" class="toggle-icon" style="cursor: pointer;">
                <i class="fas fa-cog" id="icon-open"></i> <!-- Settings icon when section is visible -->
                <i class="fas fa-times" id="icon-closed" class="hidden"></i> <!-- Cross icon when section is hidden -->
            </span>
        </div>

    </div>
</div>


<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chatContent = document.querySelector('.chat-content');
        const toggleButton = document.getElementById('toggleParticipants');
        const participantsContainer = document.getElementById('participantsContainer');
        const searchInput = document.getElementById('searchInput');
        const messagesList = document.getElementById('messagesList');
        const messageInput = document.getElementById('messageInput');
        const replyIcons = document.querySelectorAll('.reply-icon');
        const messageForm = document.getElementById('messageForm');
        const replyPreview = document.getElementById('replyPreview');
        const replyingTo = document.getElementById('replyingTo');
        const cancelReply = document.getElementById('cancelReply');
        const replyContentInput = document.getElementById('replyContentInput');
        let replyMessageContent = '';  // Variable to store the replied message content

        // Function to scroll to the bottom of the chat content
        function scrollToBottom() {
            chatContent.scrollTop = chatContent.scrollHeight;
        }

        scrollToBottom(); // Scroll to bottom on page load

        const observer = new MutationObserver(scrollToBottom);
        observer.observe(chatContent, { childList: true });

        // Toggle participants container visibility
        if (toggleButton && participantsContainer) {
            const isHidden = participantsContainer.style.display === 'none' || participantsContainer.style.display === '';
            document.getElementById('icon-open').style.display = isHidden ? 'none' : 'block';
            document.getElementById('icon-closed').style.display = isHidden ? 'block' : 'none';

            toggleButton.addEventListener('click', function () {
                const isCurrentlyHidden = participantsContainer.style.display === 'none' || participantsContainer.style.display === '';
                participantsContainer.style.display = isCurrentlyHidden ? 'block' : 'none';

                // Toggle icons based on visibility
                document.getElementById('icon-open').style.display = isCurrentlyHidden ? 'none' : 'block';
                document.getElementById('icon-closed').style.display = isCurrentlyHidden ? 'block' : 'none';
            });
        }

        // Search functionality
        if (searchInput && messagesList) {
            searchInput.addEventListener('input', function () {
                filterMessages(searchInput.value.toLowerCase());
            });

            function filterMessages(query) {
                const messages = messagesList.querySelectorAll('li');
                messages.forEach(message => {
                    const messageTextElement = message.querySelector('.message-text');
                    if (messageTextElement) {
                        const messageText = messageTextElement.textContent.toLowerCase();
                        if (messageText.includes(query)) {
                            message.style.display = 'list-item';
                        } else {
                            message.style.display = 'none';
                        }
                    }
                });
            }
        }

        // Reply functionality
        replyIcons.forEach(icon => {
            icon.addEventListener('click', function () {
                const senderName = icon.getAttribute('data-sender-name');
                const messageText = icon.getAttribute('data-message-text');
                replyingTo.textContent = `Replying to ${senderName}: "${messageText}"`;
                replyPreview.style.display = 'block';
                messageInput.focus();

                // Format reply message content as plain text
                replyMessageContent = `Replying to ${senderName}: "${messageText}"\n`;
                replyContentInput.value = replyMessageContent; // Store reply content in hidden input
            });
        });

        // Cancel reply
        cancelReply.addEventListener('click', function () {
            replyPreview.style.display = 'none';
            replyingTo.textContent = '';
            replyMessageContent = ''; // Clear the replied message content
            replyContentInput.value = ''; // Clear the hidden input value
        });

        // Form submission
        messageForm.addEventListener('submit', function (event) {
            // Combine reply message content with new message content
            const newMessage = messageInput.value.trim();

            if (newMessage !== '') {
                const combinedMessage = replyMessageContent + newMessage; // Combine as plain text
                messageInput.value = combinedMessage; // Update the message input with the combined message
            } else {
                event.preventDefault(); // Prevent submission if the new message is empty
            }
        });

        // Handle delete functionality with AJAX
        const deleteForms = document.querySelectorAll('.delete-message-form');
        deleteForms.forEach(function (form) {
            form.addEventListener('submit', function (event) {
                event.preventDefault(); // Prevent default form submission

                const confirmed = confirm("Are you sure you want to delete this message?");
                if (!confirmed) {
                    return;
                }

                const formData = new FormData(form);

                $.ajax({
                    url: form.action,
                    method: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            location.reload(); // Refresh the page
                        } else {
                            alert("Failed to delete the message.");
                        }
                    },
                    error: function () {
                        alert("An error occurred. Please try again.");
                    }
                });
            });
        });

        // Handle dropdown functionality
        $(document).on('click', '.dropdown-toggle', function () {
            const $dropdownMenu = $(this).next('.dropdown-menu');
            $dropdownMenu.toggle();

            // Close other dropdowns
            $('.dropdown-menu').not($dropdownMenu).hide();
        });

        // Initialize Bootstrap dropdowns
        $('.dropdown-toggle').dropdown();
    });







</script>   