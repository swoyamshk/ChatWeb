@page "{roomId:int}"
@model ChatModel
@{
    ViewData["Title"] = "Private Chat";
}
<link rel="stylesheet" href="~/css/Chat/privateChat.css" />
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<div class="container-fluid chat-wrapper">
    <div class="row">
        <div class="col-md-3 chat-rooms-container">
            <h2>Chat Rooms</h2>
            <ul class="chat-rooms-list">
                @foreach (var room in Model.ChatRooms)
                {
                    <li class="chat-room-item @(room.Id == Model.Room.Id ? "active" : "")">
                        <a asp-page="Chat" asp-route-roomId="@room.Id">@room.Name</a>
                    </li>
                }
            </ul>
        </div>
        <div class="col-md-6 chat-container">
            <h2 class="chat-room-title">
                @Model.Room.Name
                <div class="participant-count">
                    Total Participants: @Model.Participants.Count
                </div>
            </h2>
            <div class="chat-content-container">
                <div class="chat-content">
                    <ul id="messagesList" class="chat-box">
                        @if (Model.Messages.Any())
                        {
                            var lastDate = Model.Messages.First().Timestamp.Date;
                            <li class="date-separator">
                                <span class="date">@lastDate.ToString("MMMM dd, yyyy")</span>
                            </li>
                            @foreach (var message in Model.Messages)
                            {
                                if (message.Timestamp.Date != lastDate)
                                {
                                    lastDate = message.Timestamp.Date;
                                    <li class="date-separator">
                                        <span class="date">@lastDate.ToString("MMMM dd, yyyy")</span>
                                    </li>
                                }
                                <li class="list-group-item @(message.Sender.Email == User.Identity.Name ? "sent" : "received")">
                                    @if (message.Sender.Email != User.Identity.Name)
                                    {
                                        <div class="username">@message.Sender.FirstName @message.Sender.LastName</div>
                                    }
                                    <div class="message">@message.Content</div>
                                    <div class="time">@message.Timestamp.ToString("h:mm tt").ToUpper()</div>

                                    @if (!string.IsNullOrEmpty(message.ImageUrl))
                                    {
                                        <div class="message"><img src="@message.ImageUrl" class="chat-image" /></div>
                                    }
                                </li>
                            }
                        }
                    </ul>
                </div>
                <form id="messageForm" method="post" enctype="multipart/form-data">
                    <div class="input-group">
                        <input type="hidden" id="userEmail" value="@User.Identity.Name" />
                        <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
                        <input type="text" class="form-control" name="Content" placeholder="Type your message..." />
                        <label for="fileInput" class="btn btn-secondary file-label">
                            <i class="fas fa-file-upload"></i>
                        </label>
                        <input type="file" id="fileInput" class="form-control-file" name="Image" accept="image/*" style="display: none;" />
                        <button type="submit" class="btn btn-primary" id="sendButton">Send</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-3 participants-container">
            <h3>
                Chat Details
            </h3>
            <hr> <!-- Horizontal line -->
            <div class="chat-details">
                <h4>Participants</h4>
                <span id="toggleParticipants" class="toggle-icon" style="cursor: pointer;">
                    <i class="fas fa-times"></i>
                </span>
            </div>
            <div id="participantsList">
                <!-- Add User Form -->
                <form id="addUserForm" method="post" asp-page-handler="AddUser">
                    <div class="form-group">
                        <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
                        <input type="text" class="form-control" name="UserIdToAdd" placeholder="Enter user email..." />
                        <span asp-validation-for="UserIdToAdd" class="text-danger"></span>
                    </div>
                    <button type="submit" class="btn btn-secondary">Add User</button>
                </form>

                <!-- Participants List -->
                <ul>
                    @foreach (var participant in Model.Participants)
                    {
                        <li>
                            @participant.FirstName
                            @if (participant.Email == Model.Room.Creator.Email)
                            {
                                <span>(Admin)</span>
                            }
                            @if (User.Identity.Name == Model.Room.Creator.Email && participant.Email != Model.Room.Creator.Email)
                            {
                                <!-- Delete icon button -->
                                <button class="remove-btn" onclick="removeUser(@participant.Id)">
                                    <i class="fas fa-trash-alt"></i> <!-- Trash icon for delete -->
                                </button>
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>




    </div>
</div>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chatContent = document.querySelector('.chat-content');
        const toggleButton = document.getElementById('toggleParticipants');
        const participantsList = document.getElementById('participantsList');

        function scrollToBottom() {
            chatContent.scrollTop = chatContent.scrollHeight;
        }

        // Call scrollToBottom on page load
        scrollToBottom();

        // Optional: Call scrollToBottom whenever a new message is added
        const observer = new MutationObserver(scrollToBottom);
        observer.observe(chatContent, { childList: true });

        // Toggle participants visibility
        if (toggleButton && participantsList) {
            toggleButton.addEventListener('click', function () {
                if (participantsList.style.display === 'none' || participantsList.style.display === '') {
                    participantsList.style.display = 'block';
                    toggleButton.innerHTML = '<i class="fas fa-times"></i>'; // Cross icon
                } else {
                    participantsList.style.display = 'none';
                    toggleButton.innerHTML = '<i class="fas fa-plus"></i>'; // Plus icon
                }
            });
        }

        // Handle Remove User Action
        window.removeUser = function (userId) {
            if (confirm("Are you sure you want to remove this user?")) {
                // Submit the form with the user ID to remove the user
                let form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Page("Chat", "RemoveUser")';

                let input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'UserIdToRemove';
                input.value = userId;
                form.appendChild(input);

                document.body.appendChild(form);
                form.submit();
            }
        };

        // Handle Add User Action
        const addUserButton = document.getElementById('addUserButton');
        const newUserEmailInput = document.getElementById('newUserEmail');

        if (addUserButton && newUserEmailInput) {
            addUserButton.addEventListener('click', function () {
                const email = newUserEmailInput.value.trim();
                if (email) {
                    // Create a form to submit the email to the server
                    let form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Page("Chat", "AddUser")';

                    let input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'NewUserEmail';
                    input.value = email;
                    form.appendChild(input);

                    let roomIdInput = document.createElement('input');
                    roomIdInput.type = 'hidden';
                    roomIdInput.name = 'ChatRoomId';
                    roomIdInput.value = '@Model.Room.Id';
                    form.appendChild(roomIdInput);

                    document.body.appendChild(form);
                    form.submit();
                } else {
                    alert('Please enter a valid email address.');
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            const addUserButton = document.getElementById('addUserButton');
            const newUserEmailInput = document.getElementById('newUserEmail');

            if (addUserButton && newUserEmailInput) {
                addUserButton.addEventListener('click', function (e) {
                    e.preventDefault();

                    const email = newUserEmailInput.value.trim();
                    if (email) {
                        const formData = new FormData();
                        formData.append('ChatRoomId', '@Model.Room.Id');
                        formData.append('UserIdToAdd', email);

                        fetch('@Url.Page("Chat", "AddUser")', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert(data.message);
                                    // Optionally refresh the participants list or update the UI
                                } else {
                                    alert(data.message);
                                }
                            })
                            .catch(error => console.error('Error:', error));
                    } else {
                        alert('Please enter a valid email address.');
                    }
                });
            }
        });


        // Ensure removeUser is bound to the delete buttons
        document.querySelectorAll('.remove-btn').forEach(button => {
            button.addEventListener('click', function () {
                const userId = this.getAttribute('data-userid');
                removeUser(userId);
            });
        });
    });


</script>