@page "{roomId:int}"
@model ChatModel
@{
    ViewData["Title"] = "Private Chat";
}
<h2>Chat Room: @Model.Room.Name</h2>

<div id="messagesList">
    @foreach (var message in Model.Messages)
    {
        <div><strong>@message.Sender.Email:</strong> @message.Content</div>
    }
</div>

<form id="messageForm" method="post">
    <div class="form-group">
        <input type="hidden" id="userEmail" value="@User.Identity.Name" />
        <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
        <input type="text" class="form-control" name="Content" placeholder="Type your message..." />
    </div>
    <button type="submit" class="btn btn-primary">Send Message</button>
</form>

@if (User.Identity.Name == Model.Room.Creator.Email)
{
    <form id="addUserForm" method="post" asp-page-handler="AddUser">
        <div class="form-group">
            <input type="hidden" name="ChatRoomId" value="@Model.Room.Id" />
            <input type="text" class="form-control" name="UserIdToAdd" placeholder="Enter user email..." />
        </div>
        <button type="submit" class="btn btn-secondary">Add User</button>
    </form>
}


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/privatechathub")
            .build();

        connection.start().then(function () {
            const chatRoomId = document.getElementsByName("ChatRoomId")[0].value;
            connection.invoke("JoinChatRoom", chatRoomId).catch(function (err) {
                console.error("Error joining chat room: ", err.toString());
            });
        }).catch(function (err) {
            console.error("Error starting connection: ", err.toString());
        });


        connection.on("ReceiveMessage", function (userEmail, message) {
            const msgDiv = document.createElement("div");
            msgDiv.innerHTML = "<strong>" + userEmail + ":</strong> " + message;
            document.getElementById("messagesList").appendChild(msgDiv);
        });

        connection.start().then(function () {
            const chatRoomId = document.getElementsByName("ChatRoomId")[0].value;
            connection.invoke("JoinChatRoom", chatRoomId).catch(function (err) {
                console.error("Error joining chat room: ", err.toString());
            });
        }).catch(function (err) {
            console.error("Error starting connection: ", err.toString());
        });

        document.getElementById("messageForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevents the form from submitting traditionally
            const form = event.target;
            const message = form.Content.value;
            const chatRoomId = form.ChatRoomId.value;
            const userEmail = document.getElementById("userEmail").value;

            if (message.trim() !== "") {
                fetch(form.action, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: new URLSearchParams(new FormData(form)).toString()
                }).then(response => {
                    if (response.ok) {
                        connection.invoke("SendMessage", chatRoomId, message).catch(function (err) {
                            console.error("Error sending message: ", err.toString());
                        });
                        form.Content.value = ''; // Clear the input field after successful send
                    } else {
                        console.error("Form submission failed.");
                    }
                }).catch(error => {
                    console.error("Error during fetch:", error);
                });
            }
        });

        document.getElementById("addUserForm")?.addEventListener("submit", function (event) {
            event.preventDefault(); // Prevents the form from submitting traditionally
            const form = event.target;
            const userIdToAdd = form.UserIdToAdd.value;
            const chatRoomId = form.ChatRoomId.value;

            if (userIdToAdd.trim() !== "" && chatRoomId) {
                fetch(form.action, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: new URLSearchParams(new FormData(form)).toString()
                }).then(response => {
                    if (response.ok) {
                        form.UserIdToAdd.value = ''; // Clear the input field after successful send
                    } else {
                        console.error("Form submission failed.");
                    }
                }).catch(error => {
                    console.error("Error during fetch:", error);
                });
            }
        });


    </script>
}