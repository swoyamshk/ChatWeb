@page
@model GlobalChatModel
@{
    ViewData["Title"] = "Global Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/chat/userChat.css" />

<div class="container chat-container">
    <h2>Global Chat</h2>
    <div class="search-bar">
        <input type="text" id="searchInput" class="form-control" placeholder="Search messages...">
    </div>
    <div class="chat-content-container">
        <div class="chat-content">
            <div class="chat-box" id="chatBox">
                <ul id="messagesList" class="list-group">
                    @foreach (var message in Model.Messages)
                    {
                        <li class="list-group-item @(message.UserName == Model.CurrentUser?.Email ? "sent" : "received")">
                            @if (message.User != null && message.User.Email != Model.CurrentUser?.Email)
                            {
                                <div class="username">@message.User.FirstName @message.User.LastName</div>
                            }
                            <div class="message-container">
                                <div class="message-content">
                                    <div class="message">@message.Text</div>
                                    @if (!string.IsNullOrEmpty(message.ImageUrl))
                                    {
                                        <div class="image chat-image">
                                            <img src="@message.ImageUrl" alt="Image" />
                                        </div>
                                    }
                                    <div class="time">@message.Timestamp.ToLocalTime().ToString("HH:mm")</div>
                                </div>
                                @if (message.User.Email == Model.CurrentUser?.Email)
                                {
                                    <form method="post" class="delete-message-form">
                                        <input type="hidden" name="Id" value="@message.Id" />
                                        <button type="submit" class="btn btn-sm delete-button">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </form>
                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>

            <div class="chat-input">
                <form id="messageForm" method="post" enctype="multipart/form-data">
                    <div class="input-group">
                        <input type="hidden" id="userEmail" value="@Model.CurrentUser.Email" />
                        <input type="file" class="form-control" name="Image" id="imageInput" accept="image/*" style="display: none;" />
                        <label for="imageInput" class="btn btn-secondary" style="margin-right:10px;">
                            <i class="fas fa-image"></i>
                        </label>
                        <input type="text" class="form-control" name="Content" placeholder="Type your message..." />
                        <button type="submit" class="btn btn-primary" id="sendButton">Send Message</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<button class="chat-button" id="chatToggleButton">
    <i class="fas fa-comment"></i>
</button>
<div class="chat-window" id="chatWindow">
    <div class="chat-header">
        Chatbot
    </div>
    <div class="chat-body" id="chatBody">
        <div id="predefinedQuestions">
            @foreach (var faq in Model.FAQs)
            {
                <div class="question" data-question="@faq.Question">@faq.Question</div>
            }
        </div>
        <!-- Chat messages will appear here -->
    </div>
    <div class="chat-footer">
        <input type="text" id="userInput" placeholder="Type a message...">
        <button id="sendButton"><i class="fas fa-paper-plane"></i></button>
    </div>
    <div class="typing-indicator" id="typingIndicator">Chatbot is typing...</div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

    <script>
        const faqs = @Html.Raw(ViewData["FAQsJson"]);

        console.log(faqs); // Check if FAQs are correctly passed

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().then(function () {
            console.log("SignalR connection established.");
        }).catch(function (err) {
            console.error("Error starting connection: ", err.toString());
        });

        connection.on("ReceiveMessage", function (userName, firstName, lastName, message, imageUrl) {
            const msgDiv = document.createElement("li");
            const currentUserEmail = document.getElementById("userEmail").value;
            msgDiv.classList.add("list-group-item", userName === currentUserEmail ? "sent" : "received");

            let messageContent = '';

            if (userName !== currentUserEmail) {
                messageContent += `<div class="username">${firstName} ${lastName}</div>`;
            } else {
                messageContent += `<div class="username"></div>`;
            }

            messageContent += `<div class="message">${message}</div>`;
            if (imageUrl) {
                messageContent += `<div class="image chat-image"><img src="${imageUrl}" alt="Image" style="max-width: 200px; max-height: 200px;" /></div>`;
            }
            messageContent += `<div class="time">${new Date().toLocaleTimeString()}</div>`;

            msgDiv.innerHTML = messageContent;
            document.getElementById("messagesList").appendChild(msgDiv);
            scrollToBottom();
        });

        document.getElementById("messageForm").addEventListener("submit", function (event) {
            event.preventDefault();
            const form = event.target;
            const message = form.Content.value;
            const userEmail = document.getElementById("userEmail").value;

            const formData = new FormData(form);

            if (message.trim() !== "" || form.Image.files.length > 0) {
                fetch(form.action, {
                    method: "POST",
                    body: formData
                }).then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        console.error("Form submission failed.");
                        throw new Error('Form submission failed');
                    }
                }).then(data => {
                    connection.invoke("SendMessage", userEmail, data.firstName, data.lastName, message, data.imageUrl).catch(function (err) {
                        console.error("Error sending message: ", err.toString());
                    });
                    form.Content.value = '';
                    form.Image.value = '';
                }).catch(error => {
                    console.error(error);
                });
            }
        });

        document.getElementById("searchInput").addEventListener("keyup", function () {
            const searchTerm = this.value.toLowerCase();
            const messages = document.querySelectorAll("#messagesList li");

            messages.forEach(function (message) {
                const textContent = message.textContent.toLowerCase();
                if (textContent.includes(searchTerm)) {
                    message.style.display = ""; // Show the message
                } else {
                    message.style.display = "none"; // Hide the message
                }
            });
        });

        document.getElementById("imageInput").addEventListener("change", function () {
            const file = this.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                const previewImage = document.createElement("img");
                previewImage.src = e.target.result;
                previewImage.style.maxWidth = "200px";
                previewImage.style.maxHeight = "200px";
                document.getElementById("imagePreview").innerHTML = "";
                document.getElementById("imagePreview").appendChild(previewImage);
            };

            if (file) {
                reader.readAsDataURL(file);
            }
        });

        // Ensure jQuery is available, as this code relies on it
        $(document).ready(function () {
            $('#messagesList').on('submit', '.delete-message-form', function (event) {
                event.preventDefault(); // Prevent default form submission

                const form = $(this);
                const messageId = form.find('input[name="Id"]').val();

                $.ajax({
                    url: `/Identity/Chat/GlobalChat?handler=DeleteMessage`,
                    type: 'POST',
                    data: form.serialize(),
                    success: function (data) {
                        if (data.success) {
                            form.closest('li').remove(); // Remove the message from the list
                            console.log(`Message with ID ${messageId} deleted.`);
                        } else {
                            console.error('Error deleting message:', data.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error deleting message:', error);
                    }
                });
            });
        });



        function scrollToBottom() {
            const chatBox = document.getElementById("chatBox");
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        document.getElementById("chatToggleButton").addEventListener("click", function () {
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.style.display = chatWindow.style.display === "none" ? "block" : "none";
        });

        function getBotResponse(userMessage) {
            const userQuestion = userMessage.trim().toLowerCase();

            console.log("User Question:", userQuestion); // Debugging

            if (!Array.isArray(faqs)) {
                console.error("FAQs data is not an array.");
                return "How can I help you today?";
            }

            // Iterate over FAQs to find a match
            const faq = faqs.find(f => {
                if (!f || !f.Question) {
                    console.error("Invalid FAQ entry:", f);
                    return false;
                }
                // Normalize FAQ question for comparison
                const faqQuestion = f.Question.trim().toLowerCase();
                return faqQuestion === userQuestion;
            });

            // Return the answer if found, otherwise default message
            return faq ? faq.Answer : "How can I help you today?";
        }


        document.querySelectorAll("#predefinedQuestions .question").forEach(function (element) {
            element.addEventListener("click", function () {
                const question = this.getAttribute("data-question");
                addUserMessage(question);
                setTimeout(() => {
                    const botResponse = getBotResponse(question);
                    addBotMessage(botResponse);
                }, 1000);
            });
        });

        document.getElementById("sendButton").addEventListener("click", function () {
            sendMessage();
        });

        document.getElementById("userInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                sendMessage();
            }
        });

        function sendMessage() {
            const userInput = document.getElementById("userInput").value;
            if (userInput.trim() !== "") {
                addUserMessage(userInput);
                setTimeout(() => {
                    const botResponse = getBotResponse(userInput);
                    addBotMessage(botResponse);
                }, 1000);
            }
        }

        function addUserMessage(message) {
            const chatBody = document.getElementById("chatBody");
            const messageElement = document.createElement("div");
            messageElement.classList.add("user-message");
            messageElement.textContent = message;
            chatBody.appendChild(messageElement);
            document.getElementById("userInput").value = "";
            scrollToBottom();
        }

        function addBotMessage(message) {
            const chatBody = document.getElementById("chatBody");
            const messageElement = document.createElement("div");
            messageElement.classList.add("bot-message");
            messageElement.textContent = message;
            chatBody.appendChild(messageElement);
            scrollToBottom();
        }

        function scrollToBottom() {
            const chatBody = document.getElementById("chatBody");
            chatBody.scrollTop = chatBody.scrollHeight;
        }
    </script>

    <style>
        .message-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .message-content {
            flex-grow: 1;
        }

        .delete-button {
            opacity: 0.6; /* Decreased opacity */
            font-size: 0.8rem; /* Reduced size */
            margin-left: 10px;
        }

        .chat-image img {
            max-width: 200px;
            max-height: 200px;
        }

        .question {
            background-color: #f0f0f0;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .question:hover {
                background-color: #e0e0e0;
            }

        /* Container for user messages */
        .user-message {
            background-color: #d1e7dd;
            color: #0f5132;
            padding: 10px;
            margin: 5px 0;
            border-radius: 10px;
            align-self: flex-end; /* Aligns user message to the right */
            max-width: 80%;
            word-wrap: break-word;
        }

        /* Container for bot messages */
        .bot-message {
            background-color: cadetblue;
            color: #ffffff;
            padding: 10px;
            margin: 5px 0;
            border-radius: 10px;
            align-self: flex-start; /* Aligns bot message to the left */
            max-width: 80%;
            word-wrap: break-word;
        }

        /* Chat body adjustments */
        .chat-body {
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            padding: 10px;
            background-color: #ffffff;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-height: 300px;
        }

        /* General message container adjustments */
        .message-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
        }

        .message-content {
            flex-grow: 1;
        }

        .delete-button {
            opacity: 0.6;
            font-size: 0.8rem;
            margin-left: 10px;
        }

        .chat-image img {
            max-width: 200px;
            max-height: 200px;
        }

        .search-bar {
            margin-bottom: 15px;
        }

        #searchInput {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

    </style>
}

